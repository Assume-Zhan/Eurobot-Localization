// Generated by gencpp from file phidgets_msgs/SetAnalogOutputRequest.msg
// DO NOT EDIT!


#ifndef PHIDGETS_MSGS_MESSAGE_SETANALOGOUTPUTREQUEST_H
#define PHIDGETS_MSGS_MESSAGE_SETANALOGOUTPUTREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace phidgets_msgs
{
template <class ContainerAllocator>
struct SetAnalogOutputRequest_
{
  typedef SetAnalogOutputRequest_<ContainerAllocator> Type;

  SetAnalogOutputRequest_()
    : index(0)
    , voltage(0.0)  {
    }
  SetAnalogOutputRequest_(const ContainerAllocator& _alloc)
    : index(0)
    , voltage(0.0)  {
  (void)_alloc;
    }



   typedef uint16_t _index_type;
  _index_type index;

   typedef double _voltage_type;
  _voltage_type voltage;





  typedef boost::shared_ptr< ::phidgets_msgs::SetAnalogOutputRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::phidgets_msgs::SetAnalogOutputRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetAnalogOutputRequest_

typedef ::phidgets_msgs::SetAnalogOutputRequest_<std::allocator<void> > SetAnalogOutputRequest;

typedef boost::shared_ptr< ::phidgets_msgs::SetAnalogOutputRequest > SetAnalogOutputRequestPtr;
typedef boost::shared_ptr< ::phidgets_msgs::SetAnalogOutputRequest const> SetAnalogOutputRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::phidgets_msgs::SetAnalogOutputRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::phidgets_msgs::SetAnalogOutputRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::phidgets_msgs::SetAnalogOutputRequest_<ContainerAllocator1> & lhs, const ::phidgets_msgs::SetAnalogOutputRequest_<ContainerAllocator2> & rhs)
{
  return lhs.index == rhs.index &&
    lhs.voltage == rhs.voltage;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::phidgets_msgs::SetAnalogOutputRequest_<ContainerAllocator1> & lhs, const ::phidgets_msgs::SetAnalogOutputRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace phidgets_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::phidgets_msgs::SetAnalogOutputRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::phidgets_msgs::SetAnalogOutputRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::phidgets_msgs::SetAnalogOutputRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::phidgets_msgs::SetAnalogOutputRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::phidgets_msgs::SetAnalogOutputRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::phidgets_msgs::SetAnalogOutputRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::phidgets_msgs::SetAnalogOutputRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1dc9e97abcdfdbceae7daea4cabaa378";
  }

  static const char* value(const ::phidgets_msgs::SetAnalogOutputRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1dc9e97abcdfdbceULL;
  static const uint64_t static_value2 = 0xae7daea4cabaa378ULL;
};

template<class ContainerAllocator>
struct DataType< ::phidgets_msgs::SetAnalogOutputRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "phidgets_msgs/SetAnalogOutputRequest";
  }

  static const char* value(const ::phidgets_msgs::SetAnalogOutputRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::phidgets_msgs::SetAnalogOutputRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Sets the state of a digital output.\n"
"\n"
"uint16 index   # index of the output to be set\n"
"float64 voltage\n"
;
  }

  static const char* value(const ::phidgets_msgs::SetAnalogOutputRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::phidgets_msgs::SetAnalogOutputRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.index);
      stream.next(m.voltage);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetAnalogOutputRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::phidgets_msgs::SetAnalogOutputRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::phidgets_msgs::SetAnalogOutputRequest_<ContainerAllocator>& v)
  {
    s << indent << "index: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.index);
    s << indent << "voltage: ";
    Printer<double>::stream(s, indent + "  ", v.voltage);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PHIDGETS_MSGS_MESSAGE_SETANALOGOUTPUTREQUEST_H
